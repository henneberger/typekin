package typekin.tests.example;

import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import lombok.Getter;
import lombok.Value;
import typekin.tests.example.Typekin.RunDao.RunFragment;
import typekin.tests.example.Typekin.RunDao.RunWithDatasetFragment;

/**
 * What it will compile into
 */
public class Typekin {
  class RunService {
    public void doSomething() {
      RunDao runDao = new RunDao();
      RunFragment runFragment = runDao.getRunFragment();
      RunWithDatasetFragment runWithDataset = runDao.getRunAndDatasetFragment();

      printRun(runFragment);
      printRun(runWithDataset);

//      printRunWithDataset(runFragment); //Does not compile.
      printRunWithDataset(runWithDataset);
    }

    private void printRun(RunOnlyFragmentInput runWithDataset) {
      System.out.println(runWithDataset.getUuid());
      System.out.println(runWithDataset.getCreatedAt());
    }

    private void printRunWithDataset(RunWithDatasetFragmentInput runWithDataset) {
      System.out.println(runWithDataset.getUuid());
      System.out.println(runWithDataset.getCreatedAt());
      System.out.println(runWithDataset.getInputs().get(0).getUuid());
    }
  }

  interface RunOnlyFragmentInput {
    UUID getUuid();
    Instant getCreatedAt();
  }

  interface RunWithDatasetFragmentInput {
    UUID getUuid();
    Instant getCreatedAt();
    List<? extends DatasetInputFragment> getInputs();
  }
  interface DatasetInputFragment {
    UUID getUuid();
  }

  //The type reference for the model
  // Relationships implement a St{name}Ref
  //
  public static class Model {
//    @Model(clazz = Run.class)
    public class Run implements StRun {
      public UUID getUuid(){return null;}
      public Instant getCreatedAt(){return null;}
      public List<? extends StDatasetRef> getInputs(){return null;}
    }

    public class Dataset implements StDataset {
      public UUID getUuid(){return null;}
      public StRunRef getRun(){return null;}
    }
  }

  interface StRunRef extends DatasetInputFragment{}
  interface StDatasetRef extends DatasetInputFragment{}
  interface StRun extends RunOnlyFragmentInput, RunWithDatasetFragmentInput{}
  interface StDataset extends DatasetInputFragment{}

  class RunDao {
    public RunFragment getRunFragment() {
      return new RunFragment(UUID.randomUUID(), Instant.now());
    }

    public RunWithDatasetFragment getRunAndDatasetFragment() {
      return new RunWithDatasetFragment(UUID.randomUUID(), Instant.now(), new ArrayList<>());
    }

    @Value
    class RunFragment implements StRunFragment {
      UUID uuid;
      Instant createdAt;

      public UUID getUuid() {
        return uuid;
      }

      public Instant getCreatedAt() {
        return createdAt;
      }
    }

    @Value
    @Getter
    class RunWithDatasetFragment implements StRunWithDatasetFragment {
      UUID uuid;
      Instant createdAt;
      List<DatasetFragment> inputs;

      public UUID getUuid() {
        return uuid;
      }

      public Instant getCreatedAt() {
        return createdAt;
      }

      public List<DatasetFragment> getInputs() {
        return inputs;
      }
    }

    class DatasetFragment implements StDatasetrFragment, DatasetInputFragment {
      UUID uuid;

      public UUID getUuid() {
        return uuid;
      }
    }
  }

  //Generated by an annotation processor based on its structural usage
  public interface StRunFragment extends RunOnlyFragmentInput {}
  public interface StRunWithDatasetFragment extends RunOnlyFragmentInput, RunWithDatasetFragmentInput {}
  public interface StDatasetrFragment extends DataTypeRef {}

  public interface DataTypeRef extends DatasetInputFragment{}
}