package typekin.tests.example;

import java.util.ArrayList;
import java.util.List;

public class GeneratedFooExample {
  //@Model(clazz = FooModel.class)
  private class FooModel implements StFooModel {
    public String getA(){return null;}
    public String getB(){return null;}
    public String getC(){return null;}
    public List<? extends StBarRef> getBar(){return null;}
  }
  //@Model(clazz = FooModel.class)
  private class BarModel implements StBarModel {
    public String getA(){return null;}
    public String getB(){return null;}
    public StFooRef getFoo(){return null;}
  }

  //@TypeOf(clazz = FooModel.class)
  private interface FooAInput {
    String getA();
    List<? extends BarInput> getBar();
  }
  //@TypeOf(clazz = FooModel.class)
  private interface FooABInput {
    String getA();
    String getB();
    List<? extends BarInput> getBar();
  }
  //@TypeOf(clazz = FooModel.class)
  private interface FooCInput {
    String getC();
  }
  //@TypeOf(clazz = BarModel.class)
  private interface BarInput {
    String getA();
  }
  //compile error on Model, D is not a property of Foo
  //@TypeOf(clazz = FooModel.class)
  //public interface FooDInput {
  //  String getD();
  //}

  //You add `implements St{name}`
  //@StructuralType(clazz = FooModel.class)
  private static class FooAFragment implements StFooAFragment {
    public String getA() { return "A"; }
    public List<BarFragment> getBar() {return new ArrayList<>();}
    public String extraParam() {return "extra";}
  }
  //@StructuralType(clazz = FooModel.class)
  private static class FooABFragment implements StFooABFragment {
    public String getA() { return "A"; }
    public String getB() { return "B"; }
    public List<BarFragment> getBar() {return new ArrayList<>();}
  }
  //@StructuralType(clazz = FooModel.class)
  private static class FooCFragment implements StFooCFragment {
    public String getC() { return "C"; }
  }
  //@StructuralType(clazz = BarModel.class)
  private static class BarFragment implements StBarFragment {
    public String getA() { return "A"; }
  }

  public static void main(String[] args) {
    print(new FooAFragment());
    print(new FooABFragment());
    //print(new FooCFragment()); //compile error
  }

  public static void print(FooAInput fooAInput) {
    System.out.println(fooAInput.getA());
    System.out.println(fooAInput.getBar().get(0).getA());
    //System.out.println(fooAInput.getBar().get(0).getB()); //compile error
    //System.out.println(fooInput.getB()); //compile error
    //System.out.println(fooInput.getC()); //compile error
  }

  //This gets generated by the annotations to
  // maintain fragment to input association
  private interface StFooAFragment extends FooAInput {}
  private interface StFooABFragment extends FooAInput, FooABInput {}
  private interface StFooCFragment {}
  private interface StBarFragment extends BarInput {}

  //This gets generated by the annotations to
  // maintain the input fragment defs:
  private interface StFooModel extends FooAInput, FooABInput {}
  private interface StBarModel extends BarInput {}
  private interface StFooRef extends StFooAFragment, StFooABFragment, StFooCFragment {}
  private interface StBarRef extends StBarFragment {}
}
